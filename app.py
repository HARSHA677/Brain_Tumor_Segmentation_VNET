# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qc8fpCpVHY6Ql9p7eKONOIWytlC8zChg
"""

import os
import pickle
import streamlit as st
import SimpleITK as sitk
import numpy as np
import tensorflow as tf

# Load the model
working_dir = os.path.dirname(os.path.abspath(__file__))
model = pickle.load(open(f'{working_dir}/vent-model.h5', 'rb'))

# Set page configuration
st.set_page_config(page_title="Health Assistant",
                   layout="wide",
                   page_icon="üßë‚Äç‚öïÔ∏è")

# Define function to load MRI data from uploaded files
def load_data_from_uploaded_files(uploaded_files):
    """
    Load MRI images from the uploaded files.

    Args:
        uploaded_files (list): List of uploaded files.

    Returns:
        np.ndarray: Array containing loaded MRI data.
    """
    data = {'flair': None, 'seg': None, 't1': None, 't2': None}

    for uploaded_file in uploaded_files:
        filename = uploaded_file.name.lower()
        if 'flair' in filename:
            img_itk = sitk.ReadImage(uploaded_file)
            data['flair'] = sitk.GetArrayFromImage(img_itk)
        elif 'seg' in filename:
            img_itk = sitk.ReadImage(uploaded_file)
            data['seg'] = sitk.GetArrayFromImage(img_itk)
        elif 't1' in filename:
            img_itk = sitk.ReadImage(uploaded_file)
            data['t1'] = sitk.GetArrayFromImage(img_itk)
        elif 't2' in filename:
            img_itk = sitk.ReadImage(uploaded_file)
            data['t2'] = sitk.GetArrayFromImage(img_itk)

    # Append the loaded data into a list
    data_list = []
    for key in ['flair', 'seg', 't1', 't2']:
        if data[key] is not None:
            data_list.append(data[key])

    # Convert the list of arrays to a single numpy array
    data = np.asarray(data_list, dtype=np.float32)

    return data

# Define the custom loss function
def dice_coef(y_true, y_pred, epsilon=1e-6):
    intersection = tf.keras.backend.sum(tf.keras.backend.abs(y_true * y_pred), axis=-1)
    return (2. * intersection)

# Define function to preprocess MRI data
def preprocess_data(data):
    # Transpose data to match desired dimensions
    data = np.transpose(data, (0, 2, 3, 4, 1))

    # Crop data
    data = data[:, 30:120, 30:222, 30:222, :].reshape([-1, 192, 192, 4])

    # Normalize data
    data = (data - np.mean(data)) / np.max(data)

    return data

# Define function to convert target
def convert_target(predictions):
    # Reshape the predictions
    predictions = predictions.argmax(axis=-1).reshape(-1, 192, 192, 1)
    return predictions

def main():
    st.title("MRI Data Analysis")

    # File upload widgets
    uploaded_files = st.file_uploader("Upload MRI Files", type=["nii", "nii.gz"], accept_multiple_files=True)

    if uploaded_files:
        # Load MRI data
        mri_data = load_data_from_uploaded_files(uploaded_files)

        # Model the data
        predictions = model.predict(preprocess_data(mri_data))

        # Convert target
        converted_predictions = convert_target(predictions)

        # Visualize prediction and target
        st.subheader("Visualization")
        st.image(converted_predictions[0], caption="Predicted Target", use_column_width=True)

        # Display the results
        st.subheader("Results")
        st.write("Dice Coefficient:", dice_coef(mri_data['seg'], predictions))
        st.write("Loss:", 1 - dice_coef(mri_data['seg'], predictions))

if __name__ == "__main__":
    main()